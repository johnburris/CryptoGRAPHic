@page
@model ReadmeModel
@{
    ViewData["Title"] = "README";
}
<h1>@ViewData["Title"]</h1>

<h2>1. Overview</h2>

<p><b>CryptoGRAPHic</b> is a .NET web app written in C# and JS that utilizes ML.NET to forecast the price of Bitcoin based on historical price data retrieved from CoinGecko’s public API.</p>

<p>NOTE: This project is NOT meant to be an accurate prediction of Bitcoin’s price, rather it is a demonstration of ML.NET’s <code>SsaForecastingEstimator</code> class. It is not recommended to make investments based on this software.</p>
<p><b><u>THIS IS NOT FINANCIAL ADVICE AND I AM NOT A FINANCIAL ADVISOR.</u></b></p>

<h2>2. Quickstart</h2>

<p>INSTRUCTIONS HERE</p>

<h2>3. Technical</h2>

<p>When the application is launched, it makes an API call to CoinGecko retrieving daily price data for the past 365 days. It then uses ML.NET’s <code>SsaForecastingEstimator</code> class to predict the price for the next 7 days based on the previous data. All price data is stored in 2 JSON files (<code>price_actual.json</code> and <code>price_predicted.json</code>). Then, it uses Chart.js to graph the price of the previous 21 days (Actual Price) and the next 7 days (Predicted Price). All timestamps are at 0000UTC. CoinGecko updates their daily price at 0030UTC, so it is recommended to setup a Cron job/Scheduled Task every day at 0045UTC to restart the application, thus updating the actual and predicted price data. By deafult, the application listens on all IP addresses and binds to port 5000 (Configurable in <code>appsettings.json</code> and <code>Program.cs</code> respectively). If you plan on making your instance publicly accessible, it is STRONGLY recommended to run this software behind a reverse proxy server.</p>